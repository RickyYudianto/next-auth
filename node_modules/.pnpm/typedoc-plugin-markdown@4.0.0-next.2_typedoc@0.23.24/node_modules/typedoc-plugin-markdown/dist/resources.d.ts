import { ArrayType, ConditionalType, ContainerReflection, Comment, CommentDisplayPart, DeclarationHierarchy, DeclarationReflection, InferredType, IntersectionType, IntrinsicType, IndexedAccessType, LiteralType, PageEvent, ParameterReflection, ProjectReflection, QueryType, ReferenceReflection, ReferenceType, ReflectionType, SignatureReflection, SomeType, TupleType, TypeOperatorType, TypeParameterReflection, UnionType, UnknownType } from 'typedoc';
import { MarkdownThemeRenderContext } from './theme-context';
import { Collapse } from './models';
export type Templates = {
    memberTemplate: (page: PageEvent<DeclarationReflection>) => string;
    projectTemplate: (page: PageEvent<ProjectReflection>) => string;
    readmeTemplate: (page: PageEvent<ProjectReflection>) => string;
    reflectionTemplate: (page: PageEvent<DeclarationReflection>) => string;
};
export type Partials = {
    breadcrumbs: (page: PageEvent<DeclarationReflection | ProjectReflection>) => string;
    commentParts: (parts: CommentDisplayPart[]) => string;
    comment: (comment: Comment, headingLevel?: number | undefined) => string;
    frontmatter: (page: PageEvent<DeclarationReflection | ProjectReflection>) => string;
    hierarchy: (declarationHierarchy: DeclarationHierarchy) => string;
    declarationMemberTitle: (reflection: DeclarationReflection | ParameterReflection) => string;
    declarationMember: (declaration: DeclarationReflection) => string;
    indexSignatureTitle: (signature: SignatureReflection) => string;
    referenceMember: (props: ReferenceReflection) => string;
    signatureTitle: (signature: SignatureReflection, accessor?: string | undefined) => string;
    signatureMember: (signature: SignatureReflection, parentHeadingLevel?: number | undefined) => string;
    member: (reflection: DeclarationReflection) => string;
    typeDeclarationList: (props: DeclarationReflection[]) => string;
    typeDeclarationTable: (props: DeclarationReflection[]) => string;
    typeParameters: (typeParameters: TypeParameterReflection[]) => string;
    members: (container: ContainerReflection) => string;
    pageTitle: (page: PageEvent<DeclarationReflection>) => string;
    reflection: (reflection: DeclarationReflection) => string;
    sources: (reflection: DeclarationReflection | SignatureReflection) => string;
    parametersTable: (parameters: ParameterReflection[]) => string;
    toc: (reflection: DeclarationReflection | ProjectReflection) => string;
    arrayType: (arrayType: ArrayType) => string;
    conditionalType: (conditionalType: ConditionalType) => string;
    declarationType: (declarationReflection: DeclarationReflection, collapse?: Collapse) => string;
    functionType: (modelSignatures: SignatureReflection[]) => string;
    indexAccessType: (model: IndexedAccessType) => string;
    inferredType: (model: InferredType) => string;
    intersectionType: (model: IntersectionType) => string;
    intrinsicType: (model: IntrinsicType) => string;
    literalType: (literalType: LiteralType) => string;
    queryType: (queryType: QueryType) => string;
    referenceType: (referenceType: ReferenceType) => string;
    reflectionType: (reflectionType: ReflectionType, collapse: Collapse) => string;
    someType: (someType: SomeType, collapse?: Collapse) => string;
    tupleType: (tupleType: TupleType) => string;
    typeOperatorType: (model: TypeOperatorType) => string;
    unionType: (unionType: UnionType) => string;
    unknownType: (model: UnknownType) => string;
};
export declare const templates: (context: MarkdownThemeRenderContext) => Templates;
export declare const partials: (context: MarkdownThemeRenderContext) => Partials;
