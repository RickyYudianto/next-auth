"use strict";
/**
 * Copyright (c) Samuel Wall.
 *
 * This source code is licensed under the MIT license found in the
 * license file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var unist_util_visit_1 = __importDefault(require("unist-util-visit"));
/**
 * mdx-mermaid plugin.
 *
 * @param config Config passed in from parser.
 * @returns Function to transform mdxast.
 */
function plugin(config) {
    /**
     * Insert the component import into the document.
     * @param ast The document to insert into.
     */
    function insertImport(ast) {
        // See if there is already an import for the Mermaid component
        var importFound = false;
        (0, unist_util_visit_1.default)(ast, { type: 'import' }, function (node) {
            if (/\s*import\s*{\s*Mermaid\s*}\s*from\s*'mdx-mermaid(\/lib)?\/Mermaid'\s*;?\s*/.test(node.value)) {
                importFound = true;
                return unist_util_visit_1.default.EXIT;
            }
        });
        // Add the Mermaid component import to the top
        if (!importFound) {
            ast.children.splice(0, 0, {
                type: 'import',
                value: 'import { Mermaid } from \'mdx-mermaid/lib/Mermaid\';'
            });
        }
    }
    return function transformer(ast) {
        return __awaiter(this, void 0, void 0, function () {
            var instances;
            return __generator(this, function (_a) {
                instances = [];
                (0, unist_util_visit_1.default)(ast, { type: 'code', lang: 'mermaid' }, function (node, index, parent) {
                    instances.push([node, index, parent]);
                });
                // Replace each Mermaid code block with the Mermaid component
                instances.forEach(function (_a) {
                    var node = _a[0], index = _a[1], parent = _a[2];
                    parent.children.splice(index, 1, {
                        type: 'jsx',
                        value: "<Mermaid chart={`".concat(node.value, "`}/>"),
                        position: node.position
                    });
                });
                // Look for any components
                (0, unist_util_visit_1.default)(ast, { type: 'jsx' }, function (node, index, parent) {
                    if (/.*<Mermaid.*/.test(node.value)) {
                        // If the component doesn't have config
                        if (!/.*config={.*/.test(node.value)) {
                            var index_1 = node.value.indexOf('<Mermaid') + 8;
                            node.value = node.value.substring(0, index_1) +
                                " config={".concat(JSON.stringify(config || {}), "}") +
                                node.value.substring(index_1);
                        }
                        insertImport(ast);
                        return unist_util_visit_1.default.EXIT;
                    }
                });
                return [2 /*return*/, ast];
            });
        });
    };
}
module.exports = plugin;
//# sourceMappingURL=mdxast-mermaid.js.map