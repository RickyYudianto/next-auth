"use strict";
/**
 * Copyright (c) Samuel Wall.
 *
 * This source code is licensed under the MIT license found in the
 * license file in the root directory of this source tree.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mermaid = void 0;
var react_1 = __importStar(require("react"));
var mermaid_1 = __importDefault(require("mermaid"));
var theme_helper_1 = require("./theme.helper");
/**
 * Assign a unique ID to each mermaid svg as per requirements
 * of `mermaid.render`.
 */
var id = 0;
/**
 * Component to display Mermaid diagrams.
 *
 * @param param0 Diagram to display.
 * @param param1 Config.
 * @returns The component.
 */
var Mermaid = function (_a) {
    var chart = _a.chart, config = _a.config;
    // Due to Docusaurus not correctly parsing client-side from server-side modules, use the provided workaround
    // found in the accompanying issue: https://github.com/facebook/docusaurus/issues/4268#issuecomment-783553084
    /* istanbul ignore next */
    if (typeof window === 'undefined') {
        return react_1.default.createElement("div", null);
    }
    var html = document.querySelector('html');
    // Watch for changes in theme in the HTML attribute `data-theme`.
    var _b = (0, react_1.useState)((0, theme_helper_1.getTheme)(html, config)), theme = _b[0], setTheme = _b[1];
    (0, react_1.useEffect)(function () {
        var observer = new MutationObserver(function (mutations) {
            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
                var mutation = mutations_1[_i];
                if (mutation.type !== 'attributes' || mutation.attributeName !== 'data-theme') {
                    continue;
                }
                setTheme((0, theme_helper_1.getTheme)(mutation.target, config));
                break;
            }
        });
        observer.observe(html, { attributes: true });
        return function () {
            try {
                observer.disconnect();
            }
            catch (_a) {
                // Do nothing
            }
        };
    }, [chart, config, theme]);
    // When theme updates, rerender the SVG.
    var _c = (0, react_1.useState)(''), svg = _c[0], setSvg = _c[1];
    (0, react_1.useEffect)(function () {
        var render = function () {
            mermaid_1.default.render("mermaid-svg-".concat(id.toString()), chart, function (renderedSvg) { return setSvg(renderedSvg); });
            id++;
        };
        if (config) {
            if (config.mermaid) {
                mermaid_1.default.initialize(__assign(__assign({ startOnLoad: true }, config.mermaid), { theme: theme }));
            }
            else {
                mermaid_1.default.initialize({ startOnLoad: true, theme: theme });
            }
            render();
        }
        else {
            // Is there a better way?
            setTimeout(render, 0);
        }
    }, [theme, chart]);
    return react_1.default.createElement("div", { dangerouslySetInnerHTML: { __html: svg } });
};
exports.Mermaid = Mermaid;
//# sourceMappingURL=Mermaid.js.map