"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printChangeTable = exports.requestAdminKey = exports.renderMigrationsMinmal = exports.renderMigrations = exports.printMessage = exports.printHeader = void 0;
var kleur_1 = require("kleur");
var interactive_shell_1 = require("./interactive-shell");
var version = require('./../../package.json').version;
function printHeader() {
    console.log("\n\u2588\u2580\u2580 \u2584\u2580\u2588 \u2588 \u2588 \u2588\u2584 \u2588 \u2584\u2580\u2588\n\u2588\u2580  \u2588\u2580\u2588 \u2588\u2584\u2588 \u2588 \u2580\u2588 \u2588\u2580\u2588   Schema Migrate ".concat((0, kleur_1.bold)().cyan(version)));
}
exports.printHeader = printHeader;
function printMessage(m, type) {
    switch (type) {
        case 'info':
            console.log((0, kleur_1.yellow)(m));
            break;
        case 'success':
            console.log((0, kleur_1.green)(m));
            break;
        default:
            console.log((0, kleur_1.bold)().cyan().italic(m));
            break;
    }
}
exports.printMessage = printMessage;
function renderMigrations(cloudTimestamps, localTimestamps, type, amount) {
    printMessage("--------- Current cloud migrations----------", 'info');
    printMessage(cloudTimestamps.join('\n'));
    printMessage("--------- Current local migrations ----------", 'info');
    printMessage(localTimestamps.join('\n'), 'success');
    printMessage("--------- Task ----------", 'success');
    printMessage("".concat(type, " ").concat(amount, " migrations"), 'success');
    console.info('\n');
}
exports.renderMigrations = renderMigrations;
function renderMigrationsMinmal(cloudTimestamps, localTimestamps, type, amount) {
    (0, interactive_shell_1.printWithMargin)("--------- Current cloud migrations----------", 0);
    (0, interactive_shell_1.printWithMargin)(cloudTimestamps.join('\n'), 4);
    (0, interactive_shell_1.printWithMargin)("--------- Current local migrations ----------", 0);
    (0, interactive_shell_1.printWithMargin)(localTimestamps.join('\n'), 4);
    (0, interactive_shell_1.printWithMargin)("--------- Task ----------", 0);
    (0, interactive_shell_1.printWithMargin)("".concat(type, " ").concat(amount, " migrations"), 4);
    console.info('\n');
}
exports.renderMigrationsMinmal = renderMigrationsMinmal;
var requestAdminKey = function () {
    var question = "Please set the FAUNA_ADMIN_KEY environment and restart the tool.\nTo retrieve an admin key for your database, use the Security tab in dashboard https://dashboard.fauna.com/";
    (0, interactive_shell_1.printWithMargin)(question, 4);
    process.exit(0);
};
exports.requestAdminKey = requestAdminKey;
function printChangeTable(data) {
    var _a = operations(data['Role']), rolesAdded = _a.resourceAdds, rolesDeleted = _a.resourceDeletes, rolesChanged = _a.resourceChanged;
    var _b = operations(data['Collection']), collectionAdded = _b.resourceAdds, collectionDeleted = _b.resourceDeletes, collectionChanged = _b.resourceChanged;
    var _c = operations(data['Function']), functionAdded = _c.resourceAdds, functionDeleted = _c.resourceDeletes, functionChanged = _c.resourceChanged;
    var _d = operations(data['Index']), indexAdded = _d.resourceAdds, indexDeleted = _d.resourceDeletes, indexChanged = _d.resourceChanged;
    var _e = operations(data['AccessProvider']), accessProviderAdded = _e.resourceAdds, accessProviderDeleted = _e.resourceDeletes, accessProviderChanged = _e.resourceChanged;
    var _f = operations(data['Database']), databaseAdded = _f.resourceAdds, databaseDeleted = _f.resourceDeletes, databaseChanged = _f.resourceChanged;
    renderResourceData('Role', rolesAdded, rolesDeleted, rolesChanged);
    renderResourceData('Collection', collectionAdded, collectionDeleted, collectionChanged);
    renderResourceData('Function', functionAdded, functionDeleted, functionChanged);
    renderResourceData('Index', indexAdded, indexDeleted, indexChanged);
    renderResourceData('Access Provider', accessProviderAdded, accessProviderDeleted, accessProviderChanged);
    renderResourceData('Database', databaseAdded, databaseDeleted, databaseChanged);
}
exports.printChangeTable = printChangeTable;
// Helper Functions
var renderResourceData = function (title, adds, deletes, changed) {
    if (adds.length > 0 || deletes.length > 0 || changed.length > 0) {
        console.log((0, kleur_1.bold)().underline("\n ".concat(title, ": ")));
        adds.forEach(function (item) {
            return console.log((0, kleur_1.green)("\t added: ".concat(item)));
        });
        deletes.forEach(function (item) { return console.log((0, kleur_1.red)("\t deleted: ".concat(item))); });
        changed.forEach(function (item) { return console.log((0, kleur_1.yellow)("\t changed: ".concat(item))); });
    }
};
var operations = function (resource) {
    var _a, _b, _c;
    var resourceAdds = ((_a = resource.added) === null || _a === void 0 ? void 0 : _a.length) > 0 ?
        resource.added.map(function (item) { var _a; return (_a = item.target) === null || _a === void 0 ? void 0 : _a.name; }) : [];
    var resourceDeletes = ((_b = resource.deleted) === null || _b === void 0 ? void 0 : _b.length) > 0 ?
        resource.deleted.map(function (item) { var _a; return (_a = item.previous) === null || _a === void 0 ? void 0 : _a.name; }) : [];
    var resourceChanged = ((_c = resource.changed) === null || _c === void 0 ? void 0 : _c.length) > 0 ?
        resource.changed.map(function (item) { var _a; return (_a = item.previous) === null || _a === void 0 ? void 0 : _a.name; }) : [];
    return {
        resourceAdds: resourceAdds,
        resourceDeletes: resourceDeletes,
        resourceChanged: resourceChanged
    };
};
